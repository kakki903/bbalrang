// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ────────────── ENUMS ──────────────
//

enum AuthProvider {
  EMAIL
  KAKAO
  GOOGLE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum UserGrade {
  BASIC
  SILVER
  GOLD
  PREMIUM
  VIP
}

enum AdminRole {
  STAFF
  MANAGER
  SUPER
}

//
// ────────────── USER TABLES ──────────────
//

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password        String?
  name            String?
  nickname        String           @unique
  provider        AuthProvider     @default(EMAIL)
  isEmailVerified Boolean          @default(false)
  isProfileComplete Boolean @default(false)
  grade           UserGrade        @default(BASIC)
  status          UserStatus       @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastLoginAt     DateTime?

  // Relations
  oauthAccounts   OAuthAccount[]
  sessions        Session[]
}

model OAuthAccount {
  id          Int    @id @default(autoincrement())
  provider    String
  providerId  String
  userId      Int
  user        User   @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
}

model Session {
  id         Int      @id @default(autoincrement())
  userId     Int
  token      String   @unique
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
  expiredAt  DateTime
  user       User     @relation(fields: [userId], references: [id])
}

model EmailVerification {
  id          Int      @id @default(autoincrement())
  email       String
  code        String
  isVerified  Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@unique([email, code])
}

//
// ────────────── ADMIN TABLES ──────────────
//

model Admin {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  password   String
  name       String
  role       AdminRole  @default(STAFF)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  adminSessions AdminSession[]
}

model AdminSession {
  id         Int      @id @default(autoincrement())
  adminId    Int
  token      String   @unique
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
  expiredAt  DateTime
  admin      Admin    @relation(fields: [adminId], references: [id])
}
